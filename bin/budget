#!/usr/bin/env bash

budget="${1:-${PWD%/bin*}/example/example.bgt}"
[[ -a $budget ]] || { printf '%s\n' "no file '$budget'"; exit; }
sel=0
cur="dkk"
menu=("add" "delete" "modify")
printf '\e[?1049h'

reset(){ printf '\e[H\e[?25l\e[J'; calc_total; }

print_all(){
	for i in income expense;{ print_budget "$i";}
	printf '\n\e[1m%s\n' "remaining: $((it-et)) $cur"
}

print_budget(){
	state "$1" get
	printf '\n\e[4;34m\e[1m%-16.16s%16.16s\e[m\e[4m%s\n' "$1:" "$((st))" " $cur"
	for i in ${!si[@]}; do
		printf '\e[0;34m%-16.16s\e[1;35m%16.11s\e[0m%s\n' "${sn[i]}" "$((${si[i]}))" " $cur"
	done
}

print_menu(){
	printf '\e[1m%12.16s \e[0;36m%24.15s\e[m\n' "BUDGET 0.0.1" "[beta]"
	print_all
	for i in ${!menu[@]}; do
		case $i in
			$sel) printf '\e[1;36m> %s\e[m\n' "${menu[sel]}" ;;
			*) printf '\e[0;34m\e[2C%s\e[m\n' "${menu[i]}"
		esac
	done
}

add(){
	read -rp "name of $1: " entry
	read -rp "value of $entry: " value
	state "$1" add
}

delete(){
	state "$1" get
	read -rp "delete $1: " entry
	for i in "${!sn}"; do
		[[ "${sn[i]}" =~ $entry ]] || continue
		state "$1" del
	done
}

state(){
	case $1 in
		income) case $2 in
			add) in+=("$entry"); ii+=("$value") ;;
			del) unset in[i] ii[i] ;;
			get) sn=(${in[@]}); si=(${ii[@]}); st=$it ;;
			*) printf '%s\n' "failed to $2"; exit
		esac ;;
		expense) case $2 in
			add) en+=("$entry"); ei+=("$value") ;;
			del) unset en[i] ei[i] ;;
			get) sn=(${en[@]}); si=(${ei[@]}); st=$et ;;
			*) printf '%s\n' "failed to $2"; exit
		esac ;;
	esac
}

menu_forward(){
	menu_old=("${menu[@]}")
	menu=("income" "expense")
	((old_sel=sel,sel=0))
}

menu_back(){
	menu=("${menu_old[@]}")
	((sel=old_sel))
}

case_addel(){
	case ${menu_old[old_sel]} in
		add) add $1 ;;
		delete) delete $1
	esac
}

case_sel(){
	case $1 in
		add) menu_forward ;;
		delete) menu_forward ;;
		income) case_addel income ;;
		expense) case_addel expense ;;
	esac
}

case_key(){
	[[ $1 == $'\e' ]] && { read -rsn2
		[[ ${1}${REPLY} == $'\e\e[' ]] && read -rsn1 _
		local esc="${1}${REPLY}"; }
	case ${esc:-$1} in
		k|$'\e[A') ((sel=sel>0?sel-1:0)) ;;
		j|$'\e[B') ((sel=sel<${#menu[@]}-1?sel+1:${#menu[@]}-1)) ;;
		l|$'\e[C'|'') case_sel "${menu[sel]}" ;;
		h|$'\e[D'|$'\177') menu_back ;;
		w) printf '\e[2J\e[H'; write_file ;;
		$'\x1b'|q) exit 0 ;;
	esac
}

calc_total(){
	it=""; et=""; st=""
	for i in ${!ii[@]};{ ((it+=${ii[i]})); }
	for i in ${!ei[@]};{ ((et+=${ei[i]})); }
}

read_file(){
	while read -r line; do ((i++))
		[[ ! -z "$line" ]] && set $line || continue
		[[ $2 =~ [0-9] ]] || { state=${1%:}; continue; }
		entry="$1"; value="$2"
		state "$state" add
	done  < "$budget"
}

print_to_file(){
	printf '%s\n' "income:"
	for i in ${!in[@]};{ printf '%s\n' "${in[i]} ${ii[i]}";}
	printf '\n%s\n' "expense:"
	for i in ${!en[@]};{ printf '%s\n' "${en[i]} ${ei[i]}";}
}

write_file(){
	print_to_file
	read -rsn1 -p "write to file? "
	[[ $REPLY =~ y|Y ]] && print_to_file > $budget
}

main(){
	read_file
	for((;;)){ reset; print_menu; read -rsn1 key; case_key "$key"; }
}


trap "printf '\e[m\e[?1049l\e[?25h'; exit" EXIT SIGINT
main "$@"
